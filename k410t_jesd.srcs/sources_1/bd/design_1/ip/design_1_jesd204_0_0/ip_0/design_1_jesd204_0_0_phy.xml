<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <spirit:vendor>xilinx.com</spirit:vendor>
  <spirit:library>customized_ip</spirit:library>
  <spirit:name>design_1_jesd204_0_0_phy</spirit:name>
  <spirit:version>1.0</spirit:version>
  <spirit:busInterfaces>
    <spirit:busInterface>
      <spirit:name>s_axi</spirit:name>
      <spirit:displayName>s_axi</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="aximm" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="aximm_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_araddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_arready</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_arvalid</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_awaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_awready</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_awvalid</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_bready</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BRESP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_bresp</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_bvalid</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_rdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_rready</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RRESP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_rresp</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_rvalid</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_wdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_wready</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_wvalid</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>DATA_WIDTH</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.DATA_WIDTH">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PROTOCOL</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.PROTOCOL">AXI4LITE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ID_WIDTH</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.ID_WIDTH">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ADDR_WIDTH</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.ADDR_WIDTH">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>AWUSER_WIDTH</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.AWUSER_WIDTH">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ARUSER_WIDTH</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.ARUSER_WIDTH">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>WUSER_WIDTH</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.WUSER_WIDTH">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>RUSER_WIDTH</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.RUSER_WIDTH">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>BUSER_WIDTH</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.BUSER_WIDTH">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>READ_WRITE_MODE</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.READ_WRITE_MODE">READ_WRITE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>HAS_BURST</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.HAS_BURST">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>HAS_LOCK</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.HAS_LOCK">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>HAS_PROT</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.HAS_PROT">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>HAS_CACHE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.HAS_CACHE">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>HAS_QOS</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.HAS_QOS">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>HAS_REGION</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.HAS_REGION">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>HAS_WSTRB</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.HAS_WSTRB">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>HAS_BRESP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.HAS_BRESP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>HAS_RRESP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.HAS_RRESP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>SUPPORTS_NARROW_BURST</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.SUPPORTS_NARROW_BURST">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>NUM_READ_OUTSTANDING</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.NUM_READ_OUTSTANDING">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>NUM_WRITE_OUTSTANDING</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.NUM_WRITE_OUTSTANDING">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>MAX_BURST_LENGTH</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.MAX_BURST_LENGTH">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>NUM_READ_THREADS</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.NUM_READ_THREADS">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>NUM_WRITE_THREADS</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.NUM_WRITE_THREADS">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>RUSER_BITS_PER_BYTE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.RUSER_BITS_PER_BYTE">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>WUSER_BITS_PER_BYTE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI.WUSER_BITS_PER_BYTE">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.S_AXI.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.s_axi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>s_axi_aclk</spirit:name>
      <spirit:displayName>s_axi_aclk</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_aclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.S_AXI_ACLK.ASSOCIATED_BUSIF">s_axi</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.S_AXI_ACLK.ASSOCIATED_RESET">s_axi_aresetn</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI_ACLK.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI_ACLK.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.S_AXI_ACLK.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.S_AXI_ACLK.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.s_axi_aclk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>s_axi_aresetn</spirit:name>
      <spirit:displayName>s_axi_aresetn</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>s_axi_aresetn</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.S_AXI_ARESETN.POLARITY">ACTIVE_LOW</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.S_AXI_ARESETN.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.s_axi_aresetn" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>cpll_refclk_port</spirit:name>
      <spirit:displayName>cpll_refclk</spirit:displayName>
      <spirit:description>JESD204 PHY CPLL Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>cpll_refclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.CPLL_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.CPLL_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.CPLL_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.CPLL_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.CPLL_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.CPLL_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.cpll_refclk_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) == 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>qpll0_refclk_port</spirit:name>
      <spirit:displayName>qpll0_refclk</spirit:displayName>
      <spirit:description>JESD204 PHY QPLL0 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>qpll0_refclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL0_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL0_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL0_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL0_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL0_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.QPLL0_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.qpll0_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>qpll1_refclk_port</spirit:name>
      <spirit:displayName>qpll1_refclk</spirit:displayName>
      <spirit:description>JESD204 PHY QPLL1 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>qpll1_refclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL1_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL1_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL1_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL1_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL1_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.QPLL1_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.qpll1_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>qpll_refclk_port</spirit:name>
      <spirit:displayName>qpll_refclk</spirit:displayName>
      <spirit:description>JESD204 PHY QPLL Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>qpll_refclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.QPLL_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.QPLL_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.qpll_refclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) == 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>pll0_refclk_port</spirit:name>
      <spirit:displayName>pll0_refclk</spirit:displayName>
      <spirit:description>JESD204 PHY PLL0 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>pll0_refclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL0_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL0_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL0_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL0_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL0_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.PLL0_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.pll0_refclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) == 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>pll1_refclk_port</spirit:name>
      <spirit:displayName>pll1_refclk</spirit:displayName>
      <spirit:description>JESD204 PHY PLL1 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>pll1_refclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL1_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL1_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL1_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL1_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.PLL1_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.PLL1_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.pll1_refclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) == 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>txusrclk_port</spirit:name>
      <spirit:displayName>txusrclk</spirit:displayName>
      <spirit:description>JESD204 PHY TXUSRCLK</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txusrclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXUSRCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXUSRCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXUSRCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXUSRCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXUSRCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.TXUSRCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.txusrclk_port" xilinx:dependency="(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxusrclk_port</spirit:name>
      <spirit:displayName>rxusrclk</spirit:displayName>
      <spirit:description>JESD204 PHY RXUSRCLK</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxusrclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSRCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSRCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSRCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSRCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSRCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.RXUSRCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxusrclk_port" xilinx:dependency="(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll0_clk_port</spirit:name>
      <spirit:displayName>common0_qpll0_clk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 0 QPLL0 Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_CLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_CLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_CLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_CLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_CLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_CLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll0_clk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll0_refclk_port</spirit:name>
      <spirit:displayName>common0_qpll0_refclk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 0 QPLL0 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL0_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll0_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll1_clk_port</spirit:name>
      <spirit:displayName>common0_qpll1_clk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 0 QPLL1 Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_CLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_CLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_CLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_CLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_CLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_CLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll1_clk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll1_refclk_port</spirit:name>
      <spirit:displayName>common0_qpll1_refclk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 0 QPLL1 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON0_QPLL1_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll1_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll0_clk_port</spirit:name>
      <spirit:displayName>common1_qpll0_clk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 1 QPLL0 Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_CLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_CLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_CLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_CLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_CLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_CLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll0_clk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll0_refclk_port</spirit:name>
      <spirit:displayName>common1_qpll0_refclk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 1 QPLL0 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL0_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll0_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll1_clk_port</spirit:name>
      <spirit:displayName>common1_qpll1_clk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 1 QPLL1 Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_CLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_CLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_CLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_CLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_CLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_CLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll1_clk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll1_refclk_port</spirit:name>
      <spirit:displayName>common1_qpll1_refclk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 1 QPLL1 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON1_QPLL1_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll1_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll0_clk_port</spirit:name>
      <spirit:displayName>common2_qpll0_clk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 2 QPLL0 Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_CLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_CLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_CLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_CLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_CLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_CLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll0_clk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll0_refclk_port</spirit:name>
      <spirit:displayName>common2_qpll0_refclk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 2 QPLL0 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL0_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll0_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll1_clk_port</spirit:name>
      <spirit:displayName>common2_qpll1_clk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 2 QPLL1 Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_CLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_CLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_CLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_CLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_CLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_CLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll1_clk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll1_refclk_port</spirit:name>
      <spirit:displayName>common2_qpll1_refclk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 2 QPLL1 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON2_QPLL1_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll1_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common3_qpll0_clk_port</spirit:name>
      <spirit:displayName>common3_qpll0_clk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 3 QPLL0 Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_CLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_CLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_CLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_CLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_CLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_CLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common3_qpll0_clk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common3_qpll0_refclk_port</spirit:name>
      <spirit:displayName>common3_qpll0_refclk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 3 QPLL0 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL0_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common3_qpll0_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common3_qpll1_clk_port</spirit:name>
      <spirit:displayName>common3_qpll1_clk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 3 QPLL1 Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_CLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_CLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_CLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_CLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_CLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_CLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common3_qpll1_clk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common3_qpll1_refclk_port</spirit:name>
      <spirit:displayName>common3_qpll1_refclk_in</spirit:displayName>
      <spirit:description>JESD204 PHY COMMON 3 QPLL1 Reference Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_REFCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_REFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_REFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_REFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.COMMON3_QPLL1_REFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common3_qpll1_refclk_port" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>drpclk_port</spirit:name>
      <spirit:displayName>drpclk</spirit:displayName>
      <spirit:description>JESD204 PHY DRP Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>drpclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.DRPCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.DRPCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.DRPCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.DRPCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.DRPCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.DRPCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>tx_coreclk_port</spirit:name>
      <spirit:displayName>tx_core_clk</spirit:displayName>
      <spirit:description>JESD204 PHY Tx Core Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>tx_core_clk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TX_CORECLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TX_CORECLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TX_CORECLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TX_CORECLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TX_CORECLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.TX_CORECLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>txoutclk</spirit:name>
      <spirit:displayName>txoutclk</spirit:displayName>
      <spirit:description>JESD204 PHY Tx outclk from transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txoutclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rx_coreclk_port</spirit:name>
      <spirit:displayName>rx_core_clk</spirit:displayName>
      <spirit:description>JESD204 PHY Rx Core Clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rx_core_clk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RX_CORECLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RX_CORECLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RX_CORECLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RX_CORECLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RX_CORECLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.RX_CORECLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxoutclk</spirit:name>
      <spirit:displayName>rxoutclk</spirit:displayName>
      <spirit:description>JESD204 PHY Rx outclk from transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxoutclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_tx</spirit:name>
      <spirit:description>Lane 0 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt1_tx</spirit:name>
      <spirit:description>Lane 1 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt1_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt2_tx</spirit:name>
      <spirit:description>Lane 2 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt2_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt3_tx</spirit:name>
      <spirit:description>Lane 3 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt3_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt4_tx</spirit:name>
      <spirit:description>Lane 4 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt4_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt5_tx</spirit:name>
      <spirit:description>Lane 5 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt5_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt6_tx</spirit:name>
      <spirit:description>Lane 6 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt6_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt7_tx</spirit:name>
      <spirit:description>Lane 7 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt7_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt8_tx</spirit:name>
      <spirit:description>Lane 8 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt8_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt9_tx</spirit:name>
      <spirit:description>Lane 9 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt9_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt10_tx</spirit:name>
      <spirit:description>Lane 10 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt10_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt11_tx</spirit:name>
      <spirit:description>Lane 11 Transmit Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_tx_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt11_tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_rx</spirit:name>
      <spirit:description>Lane 0 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt1_rx</spirit:name>
      <spirit:description>Lane 1 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt1_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt2_rx</spirit:name>
      <spirit:description>Lane 2 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt2_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt3_rx</spirit:name>
      <spirit:description>Lane 3 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt3_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt4_rx</spirit:name>
      <spirit:description>Lane 4 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt4_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt5_rx</spirit:name>
      <spirit:description>Lane 5 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt5_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt6_rx</spirit:name>
      <spirit:description>Lane 6 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt6_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt7_rx</spirit:name>
      <spirit:description>Lane 7 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt7_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt8_rx</spirit:name>
      <spirit:description>Lane 8 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt8_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt9_rx</spirit:name>
      <spirit:description>Lane 9 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt9_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt10_rx</spirit:name>
      <spirit:description>Lane 10 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt10_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt11_rx</spirit:name>
      <spirit:description>Lane 11 Receiver Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_rx_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxblock_sync</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxblock_sync</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxdata</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxheader</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxheader</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmisalign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxmisalign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt11_rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_drp</spirit:name>
      <spirit:displayName>gt0_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 0</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt1_drp</spirit:name>
      <spirit:displayName>gt1_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 1</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt1_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt2_drp</spirit:name>
      <spirit:displayName>gt2_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt2_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt3_drp</spirit:name>
      <spirit:displayName>gt3_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 3</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt3_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt4_drp</spirit:name>
      <spirit:displayName>gt4_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 4</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt4_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt5_drp</spirit:name>
      <spirit:displayName>gt5_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 5</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt5_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt6_drp</spirit:name>
      <spirit:displayName>gt6_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 6</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt6_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt7_drp</spirit:name>
      <spirit:displayName>gt7_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 7</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt7_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt8_drp</spirit:name>
      <spirit:displayName>gt8_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 8</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt8_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt9_drp</spirit:name>
      <spirit:displayName>gt9_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 9</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt9_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt10_drp</spirit:name>
      <spirit:displayName>gt10_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 10</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt10_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt11_drp</spirit:name>
      <spirit:displayName>gt11_drp</spirit:displayName>
      <spirit:description>DRP Interface to Transceiver 11</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt11_drp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_drp</spirit:name>
      <spirit:displayName>common0_drp</spirit:displayName>
      <spirit:description>DRP Interface to Common 0</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_drp" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_drp</spirit:name>
      <spirit:displayName>common1_drp</spirit:displayName>
      <spirit:description>DRP Interface to Common 1</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_drp" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_drp</spirit:name>
      <spirit:displayName>common2_drp</spirit:displayName>
      <spirit:description>DRP Interface to Common 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_drp" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common3_drp</spirit:name>
      <spirit:displayName>common3_drp</spirit:displayName>
      <spirit:description>DRP Interface to Common 3</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common3_drp" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug</spirit:name>
      <spirit:description>Transceiver Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_cplllock</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_dmonitorclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_dmonitorout</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_eyescandataerror</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_eyescanreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_eyescantrigger</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_loopback</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>pcsrsvdin</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_pcsrsvdin</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxbufreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxbufstatus</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxcdrhold</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxcommadet</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxdfelpmreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxlpmen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpcsreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpd</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpmareset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmaresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpmaresetdone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpolarity</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxprbscntreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxprbserr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxprbssel</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxrate</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxrate</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxresetdone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txbufstatus</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txdiffctrl</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txinhibit</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpcsreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpd</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpmareset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpolarity</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpostcursor</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txprbsforceerr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txprecursor</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txresetdone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug0</spirit:name>
      <spirit:description>Transceiver 0 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug0" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug1</spirit:name>
      <spirit:description>Transceiver 1 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt1_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug1" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug2</spirit:name>
      <spirit:description>Transceiver 2 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt2_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug2" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug3</spirit:name>
      <spirit:description>Transceiver 3 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt3_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug3" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug4</spirit:name>
      <spirit:description>Transceiver 4 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt4_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug4" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug5</spirit:name>
      <spirit:description>Transceiver 5 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt5_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug5" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug6</spirit:name>
      <spirit:description>Transceiver 6 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt6_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug6" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug7</spirit:name>
      <spirit:description>Transceiver 7 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt7_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug7" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug8</spirit:name>
      <spirit:description>Transceiver 8 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt8_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug8" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug9</spirit:name>
      <spirit:description>Transceiver 9 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt9_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug9" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug10</spirit:name>
      <spirit:description>Transceiver 10 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt10_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug10" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug11</spirit:name>
      <spirit:description>Transceiver 11 Debug Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="gt8_transceiver_debug_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_rxstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpd</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txpd_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt11_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug11" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;))  or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll0_out</spirit:name>
      <spirit:description>Common 0 QPLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll0_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll0_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll0_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll0_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll0_out</spirit:name>
      <spirit:description>Common 1 QPLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll0_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll0_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll0_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll0_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll0_out</spirit:name>
      <spirit:description>Common 2 QPLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll0_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll0_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll0_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll0_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common3_qpll0_out</spirit:name>
      <spirit:description>Common 3 QPLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll0_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll0_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll0_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common3_qpll0_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll1_out</spirit:name>
      <spirit:description>Common 0 QPLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll1_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll1_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll1_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll1_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll1_out</spirit:name>
      <spirit:description>Common 1 QPLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll1_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll1_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll1_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll1_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll1_out</spirit:name>
      <spirit:description>Common 2 QPLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll1_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll1_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll1_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll1_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common3_qpll1_out</spirit:name>
      <spirit:description>Common 3 QPLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll1_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll1_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll1_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common3_qpll1_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll_out</spirit:name>
      <spirit:description>Common 0 QPLL Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll_out</spirit:name>
      <spirit:description>Common 1 QPLL Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll_out</spirit:name>
      <spirit:description>Common 2 QPLL Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll0_in</spirit:name>
      <spirit:description>Common 0 QPLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll0_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll0_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll0_in</spirit:name>
      <spirit:description>Common 1 QPLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll0_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll0_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll0_in</spirit:name>
      <spirit:description>Common 2 QPLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll0_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll0_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common3_qpll0_in</spirit:name>
      <spirit:description>Common 3 QPLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll0_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common3_qpll0_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll1_in</spirit:name>
      <spirit:description>Common 0 QPLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll1_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll1_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll1_in</spirit:name>
      <spirit:description>Common 1 QPLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll1_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll1_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll1_in</spirit:name>
      <spirit:description>Common 2 QPLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll1_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll1_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common3_qpll1_in</spirit:name>
      <spirit:description>Common 3 QPLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll1_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common3_qpll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common3_qpll1_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_qpll_in</spirit:name>
      <spirit:description>Common 0 QPLL Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_qpll_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_qpll_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_qpll_in</spirit:name>
      <spirit:description>Common 1 QPLL Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_qpll_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_qpll_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common2_qpll_in</spirit:name>
      <spirit:description>Common 2 QPLL Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qplloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common2_qpll_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common2_qpll_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_pll0_in</spirit:name>
      <spirit:description>Common 0 PLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll0_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_pll0_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_pll0_in</spirit:name>
      <spirit:description>Common 1 PLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll0_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll0_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll0_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_pll0_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_pll1_in</spirit:name>
      <spirit:description>Common 0 PLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll1_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_pll1_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_pll1_in</spirit:name>
      <spirit:description>Common 1 PLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll1_lock_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll1_clk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll1_refclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_pll1_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_pll0_out</spirit:name>
      <spirit:description>Common 0 PLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll0_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll0_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll0_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_pll0_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_pll0_out</spirit:name>
      <spirit:description>Common 1 PLL0 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll0_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll0_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll0_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_pll0_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common0_pll1_out</spirit:name>
      <spirit:description>Common 0 PLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll1_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll1_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common0_pll1_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common0_pll1_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>common1_pll1_out</spirit:name>
      <spirit:description>Common 1 PLL1 Sharable Ports</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_jesd204" spirit:name="jesd204_phy_common_qpll_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll1_lock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll1_clk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>plloutrefclk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>common1_pll1_refclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.common1_pll1_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
  </spirit:busInterfaces>
  <spirit:model>
    <spirit:views>
      <spirit:view>
        <spirit:name>xilinx_elaboratesubcores</spirit:name>
        <spirit:displayName>Elaborate Sub-Cores</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:elaborate.subcores</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_elaboratesubcores_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Mon Oct 30 22:11:33 UTC 2023</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:3dfa85cb</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguagesynthesis</spirit:name>
        <spirit:displayName>Synthesis</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:synthesis</spirit:envIdentifier>
        <spirit:modelName>jesd204_phy_v4_0_7</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagesynthesis_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Oct 31 22:50:33 UTC 2023</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:cd2edf71</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_synthesisconstraints</spirit:name>
        <spirit:displayName>Synthesis Constraints</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:synthesis.constraints</spirit:envIdentifier>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:cd2edf71</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_verilogsynthesiswrapper</spirit:name>
        <spirit:displayName>Verilog Synthesis Wrapper</spirit:displayName>
        <spirit:envIdentifier>verilogSource:vivado.xilinx.com:synthesis.wrapper</spirit:envIdentifier>
        <spirit:language>verilog</spirit:language>
        <spirit:modelName>design_1_jesd204_0_0_phy</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_verilogsynthesiswrapper_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Oct 31 22:50:33 UTC 2023</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:cd2edf71</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguagebehavioralsimulation</spirit:name>
        <spirit:displayName>Simulation</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:simulation</spirit:envIdentifier>
        <spirit:modelName>jesd204_phy_v4_0_7</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Oct 31 22:50:33 UTC 2023</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:231e1ee4</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_verilogsimulationwrapper</spirit:name>
        <spirit:displayName>Verilog Simulation Wrapper</spirit:displayName>
        <spirit:envIdentifier>verilogSource:vivado.xilinx.com:simulation.wrapper</spirit:envIdentifier>
        <spirit:language>verilog</spirit:language>
        <spirit:modelName>design_1_jesd204_0_0_phy</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_verilogsimulationwrapper_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Oct 31 22:50:33 UTC 2023</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:231e1ee4</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
    </spirit:views>
    <spirit:ports>
      <spirit:port>
        <spirit:name>cpll_refclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.cpll_refclk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>qpll0_refclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.qpll0_refclk" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>qpll1_refclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.qpll1_refclk" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>qpll_refclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.qpll_refclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>drpclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>tx_reset_gt</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>rx_reset_gt</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>tx_sys_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>rx_sys_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>txp_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>txn_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxp_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxn_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>tx_core_clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>rx_core_clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>txoutclk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxoutclk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="8 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_drpaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_drpen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_drpdi" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_drpdo" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_drpwe" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_drprdy" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_loopback</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) * 3) - 1)">11</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_loopback" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_cplllock</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_cplllock" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txresetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txresetdone" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxresetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxresetdone" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_prbssel</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="2 + (1*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_prbssel" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)) == 0">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxprbssel</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) * 4) - 1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxprbssel" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txprbsforceerr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txprbsforceerr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxprbscntreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxprbscntreset" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxprbserr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxprbserr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpostcursor</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 5) - 1)">19</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpostcursor" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txprecursor</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 5) - 1)">19</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txprecursor" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txdiffctrl</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 4) - 1)*(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) + ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 5) - 1)*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txdiffctrl" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpolarity</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpolarity" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpolarity</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpolarity" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txinhibit</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txinhibit" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpd</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 2) - 1)">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpd" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpd</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 2) - 1)">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpd" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_eyescantrigger</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_eyescantrigger" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_eyescanreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_eyescanreset" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_eyescandataerror</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_eyescandataerror" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpmareset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpmareset" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpcsreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpcsreset" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txbufstatus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 2) - 1)">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txbufstatus" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpmareset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpmareset" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpcsreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpcsreset" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpmaresetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpmaresetdone" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxcdrhold</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxcdrhold" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxcommadet</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxcommadet" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_use_64b&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxdfelpmreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxdfelpmreset" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxlpmen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxlpmen" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxbufreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxbufreset" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxbufstatus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 3) - 1)">11</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxbufstatus" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxrate</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 3) - 1)">11</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxrate" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_dmonitorclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_dmonitorclk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_dmonitorout</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 17) - 1)*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) ) + ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 16) - 1)*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_dmonitorout" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_pcsrsvdin</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;))* 16) - 1)">63</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_pcsrsvdin" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)) == 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txheader</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Tx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>tx_reset_done</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_powergood</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_powergood" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)) ) and ( (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 1)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)) == 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)) == 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)) == 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;))* 32) + 31)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxdata" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxcharisk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxdisperr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxnotintable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxheader</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxheader" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxmisalign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxmisalign" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxblock_sync</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxblock_sync" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_JesdVersion&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rx_reset_done</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxencommaalign</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxencommaalign" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_Rx_use_64b&apos;)) == 0">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll0_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll0_clk_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll0_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll0_refclk_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll0_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll0_lock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll1_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll1_clk_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll1_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll1_refclk_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll1_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll1_lock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll0_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll0_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll0_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll0_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll0_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll0_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll1_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll1_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll1_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll1_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll1_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll1_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll0_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll0_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll0_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll0_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll0_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll0_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll1_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll1_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll1_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll1_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll1_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll1_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll0_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll0_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll0_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll0_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll0_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll0_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll1_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll1_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll1_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll1_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll1_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll1_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll0_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll0_clk_in" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll0_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll0_refclk_in" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll0_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll0_lock_in" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll1_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll1_clk_in" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll1_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll1_refclk_in" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll1_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll1_lock_in" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll0_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll0_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll0_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll0_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll0_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll0_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll1_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll1_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll1_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll1_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll1_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll1_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll0_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll0_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll0_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll0_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll0_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll0_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll1_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll1_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll1_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll1_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll1_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll1_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll0_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll0_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll0_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll0_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll0_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll0_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll1_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll1_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll1_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll1_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll1_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll1_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 8)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 8)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 8)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll_clk_in" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll_refclk_in" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 8)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 8)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 8)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>qpll_reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.qpll_reset_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 3)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>qpll0_reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.qpll0_reset_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>qpll1_reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.qpll1_reset_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 2) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 2) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll0_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll0_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll0_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll0_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll0_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll0_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll0_reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll0_reset_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll0_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll0_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll0_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll0_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll0_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll0_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll0_reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll0_reset_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll1_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll1_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll1_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll1_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll1_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll1_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll1_reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll1_reset_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll1_clk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll1_clk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll1_refclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll1_refclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll1_lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll1_lock_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll1_reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll1_reset_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll0_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll0_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll0_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll0_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll0_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll0_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll0_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll0_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll0_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll0_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll0_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll0_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll1_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll1_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll1_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll1_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_pll1_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_pll1_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll1_lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll1_lock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll1_clk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll1_clk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_pll1_refclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_pll1_refclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txusrclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txusrclk" xilinx:dependency="(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxusrclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxusrclk" xilinx:dependency="(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mmcm_lock</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mmcm_lock" xilinx:dependency="(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mmcm_locked</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mmcm_locked" xilinx:dependency="(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mmcm_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mmcm_reset" xilinx:dependency="(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pll0_refclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pll0_refclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 4) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pll1_refclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pll1_refclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) = 5) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) == 5)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt1_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt1_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 2) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt2_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt2_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 3) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt3_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt3_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 4) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt4_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt4_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 5) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt5_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt5_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 6) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt6_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt6_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 7) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt7_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt7_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 8) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt8_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt8_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 9) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt9_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt9_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 10) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt10_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt10_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 11) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxpmareset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxpcsreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txpolarity_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txinhibit_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_eyescantrigger_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_eyescanreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxprbscntreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txprbsforceerr_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxcdrhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxresetdone_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_eyescandataerror_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxprbserr_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxcommadet_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txbufstatus_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_cplllock_out" xilinx:dependency="((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and (spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxlpmen_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxdfelpmreset_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxlpmhfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxlpmhfovrden_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxlpmlfhold_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txpostcursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txprecursor_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">8</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txdiffctrl_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12)) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxprbssel_in" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxmonitorsel_in" xilinx:dependency="(((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;)) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (7*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_dmonitorout_out" xilinx:dependency="spirit:decode(id(&apos;PARAM_VALUE.TransceiverControl&apos;) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_loopback_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_txpd_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_txpd_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;))) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and !(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxstatus_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxbyteisaligned_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxbyterealign_out" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt11_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt11_rxbufreset_in" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TransceiverControl&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) >= 12) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTPE2&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (1*(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;))) + (2*(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;))) + (8*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_drpaddr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_drpen" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_drpdi" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_drpdo" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_drpwe" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_drprdy" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (1*(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;))) + (2*(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;))) + (8*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_drpaddr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_drpen" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_drpdi" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_drpdo" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_drpwe" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_drprdy" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (1*(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;))) + (2*(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;))) + (8*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_drpaddr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_drpen" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_drpdi" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_drpdo" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_drpwe" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_drprdy" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="7 + (1*(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;))) + (2*(starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;))) + (8*((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))))">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_drpaddr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_drpen" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_drpdi" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_drpdo" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_drpwe" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_drprdy" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and (((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTXE2&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE2&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_LANES&apos;)) > 8))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll0_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll0_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common0_qpll1_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common0_qpll1_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll0_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll0_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common1_qpll1_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common1_qpll1_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 2))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll0_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll0_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common2_qpll1_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common2_qpll1_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll0_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll0_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>common3_qpll1_pd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.common3_qpll1_pd" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;))) and ((starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE3&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTHE4&apos;)) or (starts_with(id(&apos;PARAM_VALUE.Transceiver&apos;),&apos;GTYE4&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_PLL_SELECTION&apos;)) != 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_PLL_SELECTION&apos;)) != 0)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SupportLevel&apos;)) = 0) and ((id(&apos;MODELPARAM_VALUE.C_QUADS&apos;)) >= 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_aclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_aclk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_aresetn</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_aresetn" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_awaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">11</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_awaddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_awvalid</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_awvalid" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_awready</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_awready" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_wdata</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_wdata" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_wvalid</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_wvalid" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_wready</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_wready" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_bresp</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_bresp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_bvalid</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_bvalid" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_bready</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_bready" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_araddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">11</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_araddr" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_arvalid</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_arvalid" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_arready</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_arready" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_rdata</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_rdata" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_rresp</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_rresp" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_rvalid</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_rvalid" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>s_axi_rready</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.s_axi_rready" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_Axi_Lite&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
    </spirit:ports>
    <spirit:modelParameters>
      <spirit:modelParameter xsi:type="spirit:nameValueTypeType" spirit:dataType="string">
        <spirit:name>C_COMPONENT_NAME</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_COMPONENT_NAME">design_1_jesd204_0_0_phy</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>C_FAMILY</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FAMILY">kintex7</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>C_SILICON_REVISION</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SILICON_REVISION"/>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LANES</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LANES">4</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>C_SPEEDGRADE</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SPEEDGRADE">-1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_SupportLevel</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SupportLevel">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_TransceiverControl</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_TransceiverControl">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_sub_core_name</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_sub_core_name">design_1_jesd204_0_0_phy_gt</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>C_GT_Line_Rate</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GT_Line_Rate">4.9152</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>C_GT_REFCLK_FREQ</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GT_REFCLK_FREQ">122.880</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>C_DRPCLK_FREQ</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_DRPCLK_FREQ">100.8</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_PLL_SELECTION</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PLL_SELECTION">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>C_RX_GT_Line_Rate</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_GT_Line_Rate">4.9152</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>C_RX_GT_REFCLK_FREQ</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_GT_REFCLK_FREQ">122.880</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_RX_PLL_SELECTION</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_PLL_SELECTION">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_QPLL_FBDIV</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_QPLL_FBDIV">40</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_QPLL_REFCLKDIV</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_QPLL_REFCLKDIV">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_PLL0_FBDIV</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PLL0_FBDIV">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_PLL0_FBDIV_45</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PLL0_FBDIV_45">4</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_PLL0_REFCLKDIV</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PLL0_REFCLKDIV">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_PLL1_FBDIV</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PLL1_FBDIV">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_PLL1_FBDIV_45</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PLL1_FBDIV_45">4</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_PLL1_REFCLKDIV</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PLL1_REFCLKDIV">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_Axi_Lite</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Axi_Lite">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>C_AXICLK_FREQ</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_AXICLK_FREQ">100.0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>C_Transceiver</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Transceiver">GTXE2</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>C_GT_Loc</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GT_Loc">X0Y0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_gt_val_extended_timeout</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_gt_val_extended_timeout">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_Tx_JesdVersion</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Tx_JesdVersion">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_Rx_JesdVersion</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Rx_JesdVersion">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_Tx_use_64b</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Tx_use_64b">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_Rx_use_64b</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Rx_use_64b">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_CHANNEL_POS</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_CHANNEL_POS">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_QUADS</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_QUADS">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_Equalization_Mode</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Equalization_Mode">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_Rx_MasterChan</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Rx_MasterChan">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_Tx_MasterChan</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Tx_MasterChan">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>C_Ins_Loss</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Ins_Loss">12</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_Config_Type</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Config_Type">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>C_Min_Line_Rate</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Min_Line_Rate">4.9152</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>C_Max_Line_Rate</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_Max_Line_Rate">4.9152</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="long">
        <spirit:name>C_GT_ENUM</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GT_ENUM">2</spirit:value>
      </spirit:modelParameter>
    </spirit:modelParameters>
  </spirit:model>
  <spirit:choices>
    <spirit:choice>
      <spirit:name>choice_list_01f302eb</spirit:name>
      <spirit:enumeration>98.304</spirit:enumeration>
      <spirit:enumeration>122.880</spirit:enumeration>
      <spirit:enumeration>153.600</spirit:enumeration>
      <spirit:enumeration>163.840</spirit:enumeration>
      <spirit:enumeration>196.608</spirit:enumeration>
      <spirit:enumeration>204.800</spirit:enumeration>
      <spirit:enumeration>245.760</spirit:enumeration>
      <spirit:enumeration>307.200</spirit:enumeration>
      <spirit:enumeration>327.680</spirit:enumeration>
      <spirit:enumeration>409.600</spirit:enumeration>
      <spirit:enumeration>491.520</spirit:enumeration>
      <spirit:enumeration>614.400</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_070fff2f</spirit:name>
      <spirit:enumeration>1</spirit:enumeration>
      <spirit:enumeration>2</spirit:enumeration>
      <spirit:enumeration>3</spirit:enumeration>
      <spirit:enumeration>4</spirit:enumeration>
      <spirit:enumeration>5</spirit:enumeration>
      <spirit:enumeration>6</spirit:enumeration>
      <spirit:enumeration>7</spirit:enumeration>
      <spirit:enumeration>8</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_26882056</spirit:name>
      <spirit:enumeration>Auto</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_949abb3f</spirit:name>
      <spirit:enumeration>X0Y0</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_9f2bad81</spirit:name>
      <spirit:enumeration>GTXE2</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_14544bc6</spirit:name>
      <spirit:enumeration spirit:text="Include Shared Logic in core (Shared logic ports available for use with other logic/instances)">1</spirit:enumeration>
      <spirit:enumeration spirit:text="Include Shared Logic in example design">0</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_587441c0</spirit:name>
      <spirit:enumeration spirit:text="8B10B">0</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_724edab5</spirit:name>
      <spirit:enumeration spirit:text="JESD204B">0</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_76b8dbc5</spirit:name>
      <spirit:enumeration spirit:text="Static Line Rate">0</spirit:enumeration>
      <spirit:enumeration spirit:text="Dynamic Line Rate">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_ab2f6b5e</spirit:name>
      <spirit:enumeration spirit:text="CPLL">0</spirit:enumeration>
    </spirit:choice>
  </spirit:choices>
  <spirit:fileSets>
    <spirit:fileSet>
      <spirit:name>xilinx_elaboratesubcores_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>ip_0/design_1_jesd204_0_0_phy_gt.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>ip_0/design_1_jesd204_0_0_phy_gt.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagesynthesis_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>axiLite_interface.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>commonDbgCtrl.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>drpChannelMailbox.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>drpCommonMailbox.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>phyAxiConfig.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>phyCoreCtrlInterface_hshk_pls_gen.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>phyCoreCtrlInterface_sync.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>phyCoreCtrlInterface.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>transDbgCtrl_async.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>transDbgCtrl_rx.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>transDbgCtrl_tx.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_7series_gtx_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_block.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_7series_gth_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_7series_gtp_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>sync_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_sync_block.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_csl_in_core.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/jesd204_phy_csl_in_core.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_support.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_gt_common_wrapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_gtwizard_0_common.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_ooc_xdc.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_ooc.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
        <spirit:userFileType>USED_IN_implementation</spirit:userFileType>
        <spirit:userFileType>USED_IN_out_of_context</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_block_xdc.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_clock_group_xdc.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_clock_group.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
        <spirit:define>
          <spirit:name>processing_order</spirit:name>
          <spirit:value>late</spirit:value>
        </spirit:define>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_clocks_xdc.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_clocks.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
        <spirit:define>
          <spirit:name>processing_order</spirit:name>
          <spirit:value>late</spirit:value>
        </spirit:define>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_reset_control_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_block_sync_sm_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_verilogsynthesiswrapper_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>jesd204_phy_block_wrapper_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>axiLite_interface.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>commonDbgCtrl.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>drpChannelMailbox.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>drpCommonMailbox.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>phyAxiConfig.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>phyCoreCtrlInterface_hshk_pls_gen.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>phyCoreCtrlInterface_sync.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>phyCoreCtrlInterface.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>transDbgCtrl_async.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>transDbgCtrl_rx.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>transDbgCtrl_tx.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_7series_gtx_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_block.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_7series_gth_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_7series_gtp_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>sync_block_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_sync_block.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_csl_in_core.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/jesd204_phy_csl_in_core.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_support.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_gt_common_wrapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy_gtwizard_0_common.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_reset_control_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>jesd204_phy_block_sync_sm_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_verilogsimulationwrapper_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>jesd204_phy_block_wrapper_v.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/design_1_jesd204_0_0_phy.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
    </spirit:fileSet>
  </spirit:fileSets>
  <spirit:description>The Xilinx JESD204 PHY core implements a Physical Layer interface to simplify the instantiation of the GTXE2, GTHE2, GTPE2, GTHE3, GTYE3, GTHE4 and GTYE4 transceivers when used with the JESD204 core.</spirit:description>
  <spirit:parameters>
    <spirit:parameter>
      <spirit:name>Component_Name</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Component_Name" spirit:order="2">design_1_jesd204_0_0_phy</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Component_Name">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LANES</spirit:name>
      <spirit:displayName>Number of Lanes</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LANES" spirit:choiceRef="choice_list_070fff2f" spirit:order="3">4</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_LANES">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Transceiver</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Transceiver" spirit:choiceRef="choice_list_9f2bad81" spirit:order="4" spirit:configGroups="1 UnGrouped">GTXE2</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Transceiver">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>SupportLevel</spirit:name>
      <spirit:displayName>Shared Logic</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.SupportLevel" spirit:choiceRef="choice_pairs_14544bc6" spirit:order="5" spirit:configGroups="2 UnGrouped">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.SupportLevel">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>TransceiverControl</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.TransceiverControl" spirit:order="6" spirit:configGroups="4 UnGrouped">true</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.TransceiverControl">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>GT_Line_Rate</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.GT_Line_Rate" spirit:order="7">4.9152</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.GT_Line_Rate">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>GT_REFCLK_FREQ</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.GT_REFCLK_FREQ" spirit:choiceRef="choice_list_01f302eb" spirit:order="8">122.880</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.GT_REFCLK_FREQ">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>DRPCLK_FREQ</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.DRPCLK_FREQ" spirit:order="9">100.8</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.DRPCLK_FREQ">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PLL_SELECTION</spirit:name>
      <spirit:displayName>PLL Type</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.C_PLL_SELECTION" spirit:choiceRef="choice_pairs_ab2f6b5e" spirit:order="10">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PLL_SELECTION">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>RX_GT_Line_Rate</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.RX_GT_Line_Rate" spirit:order="11">4.9152</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.RX_GT_Line_Rate">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>RX_GT_REFCLK_FREQ</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.RX_GT_REFCLK_FREQ" spirit:choiceRef="choice_list_01f302eb" spirit:order="12">122.880</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.RX_GT_REFCLK_FREQ">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>RX_PLL_SELECTION</spirit:name>
      <spirit:displayName>PLL Type</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.RX_PLL_SELECTION" spirit:choiceRef="choice_pairs_ab2f6b5e" spirit:order="13">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.RX_PLL_SELECTION">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Axi_Lite</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.Axi_Lite" spirit:order="14" spirit:configGroups="4 UnGrouped">false</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Axi_Lite">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>AXICLK_FREQ</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.AXICLK_FREQ" spirit:order="15">100.0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.AXICLK_FREQ">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>GT_Location</spirit:name>
      <spirit:displayName>Transceiver Location</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.GT_Location" spirit:choiceRef="choice_list_949abb3f" spirit:order="16">X0Y0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>gt_val_extended_timeout</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.gt_val_extended_timeout" spirit:order="17">false</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.gt_val_extended_timeout">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Tx_JesdVersion</spirit:name>
      <spirit:displayName>JESD204 Version</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Tx_JesdVersion" spirit:choiceRef="choice_pairs_724edab5" spirit:order="18">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Tx_JesdVersion">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Rx_JesdVersion</spirit:name>
      <spirit:displayName>JESD204 Version</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Rx_JesdVersion" spirit:choiceRef="choice_pairs_724edab5" spirit:order="19">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Rx_JesdVersion">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Tx_use_64b</spirit:name>
      <spirit:displayName>Linecode</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Tx_use_64b" spirit:choiceRef="choice_pairs_587441c0" spirit:order="20">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Tx_use_64b">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Rx_use_64b</spirit:name>
      <spirit:displayName>Linecode</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Rx_use_64b" spirit:choiceRef="choice_pairs_587441c0" spirit:order="21">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Rx_use_64b">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Equalization_Mode</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Equalization_Mode" spirit:choiceRef="choice_list_26882056" spirit:order="22">Auto</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Equalization_Mode">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Rx_MasterChan</spirit:name>
      <spirit:displayName>Rx Master Channel</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.Rx_MasterChan" spirit:order="23" spirit:minimum="1" spirit:maximum="4" spirit:rangeType="long">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Rx_MasterChan">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Tx_MasterChan</spirit:name>
      <spirit:displayName>Tx Master Channel</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.Tx_MasterChan" spirit:order="24" spirit:minimum="1" spirit:maximum="4" spirit:rangeType="long">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Tx_MasterChan">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Ins_Loss</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.Ins_Loss" spirit:order="25">12</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Ins_Loss">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Config_Type</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Config_Type" spirit:choiceRef="choice_pairs_76b8dbc5" spirit:order="26">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Config_Type">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Min_Line_Rate</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.Min_Line_Rate" spirit:order="27">4.9152</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Min_Line_Rate">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Max_Line_Rate</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.Max_Line_Rate" spirit:order="28">4.9152</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Max_Line_Rate">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
  </spirit:parameters>
  <spirit:vendorExtensions>
    <xilinx:coreExtensions>
      <xilinx:displayName>JESD204 PHY</xilinx:displayName>
      <xilinx:xpmLibraries>
        <xilinx:xpmLibrary>XPM_CDC</xilinx:xpmLibrary>
      </xilinx:xpmLibraries>
      <xilinx:coreRevision>7</xilinx:coreRevision>
      <xilinx:configElementInfos>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.ADDR_WIDTH" xilinx:valueSource="auto"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.ARUSER_WIDTH" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.AWUSER_WIDTH" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.BUSER_WIDTH" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.DATA_WIDTH" xilinx:valueSource="auto"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_BRESP" xilinx:valueSource="auto"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_BURST" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_CACHE" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_LOCK" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_PROT" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_QOS" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_REGION" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_RRESP" xilinx:valueSource="auto"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_WSTRB" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.ID_WIDTH" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.PROTOCOL" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.RUSER_WIDTH" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.WUSER_WIDTH" xilinx:valueSource="constant"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_LANES" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_PLL_SELECTION" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.DRPCLK_FREQ" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.GT_Line_Rate" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.GT_REFCLK_FREQ" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.RX_GT_Line_Rate" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.RX_GT_REFCLK_FREQ" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.RX_PLL_SELECTION" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.SupportLevel" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.Transceiver" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.TransceiverControl" xilinx:valueSource="propagated"/>
      </xilinx:configElementInfos>
    </xilinx:coreExtensions>
    <xilinx:packagingInfo>
      <xilinx:xilinxVersion>2019.2</xilinx:xilinxVersion>
      <xilinx:checksum xilinx:scope="busInterfaces" xilinx:value="a928bb27"/>
      <xilinx:checksum xilinx:scope="fileGroups" xilinx:value="ae745c12"/>
      <xilinx:checksum xilinx:scope="ports" xilinx:value="70b7d5f5"/>
      <xilinx:checksum xilinx:scope="hdlParameters" xilinx:value="3881759c"/>
      <xilinx:checksum xilinx:scope="parameters" xilinx:value="1f69bd8c"/>
    </xilinx:packagingInfo>
  </spirit:vendorExtensions>
</spirit:component>
